// This is custom goose binary with sqlite3 support only.

package main

import (
	"database/sql"
	"flag"
	"fmt"
	"log"
	"os"

	"github.com/pressly/goose"

	_ "github.com/mattn/go-sqlite3"
)

var (
	flags = flag.NewFlagSet("goose", flag.ExitOnError)
	dir   = flags.String("dir", ".", "directory with migration files")
)

func main() {
	// Optional: Register a custom dialect
	goose.RegisterDialect("nuodb", &NuoDBDialect{})

	flags.Parse(os.Args[1:])
	args := flags.Args()

	if len(args) < 2 {
		flags.Usage()
		return
	}

	driver, dbstring, command := args[0], args[1], args[2]

	db, err := goose.OpenDBWithDriver(driver, dbstring)
	if err != nil {
		log.Fatalf("goose: failed to open DB: %v\n", err)
	}

	arguments := []string{}
	if len(args) > 3 {
		arguments = append(arguments, args[3:]...)
	}

	if err := goose.Run(command, db, *dir, arguments...); err != nil {
		log.Fatalf("goose %v: %v", command, err)
	}
}

// Optional: Define a custom dialect struct
type NuoDBDialect struct{}

func (NuoDBDialect) CreateVersionTableSQL() string {
	return fmt.Sprintf(`CREATE TABLE %s (
            	id int GENERATED BY DEFAULT AS IDENTITY,
                version_id bigint NOT NULL,
                is_applied boolean NOT NULL,
                tstamp timestamp NULL default 'now',
                PRIMARY KEY(id)
            );`, goose.TableName())
}

func (NuoDBDialect) InsertVersionSQL() string {
	return fmt.Sprintf("INSERT INTO %s (version_id, is_applied) VALUES (?, ?);", goose.TableName())
}

func (NuoDBDialect) DBVersionQuery(db *sql.DB) (*sql.Rows, error) {
	rows, err := db.Query(fmt.Sprintf("SELECT version_id, is_applied from %s ORDER BY id DESC", goose.TableName()))
	if err != nil {
		return nil, err
	}

	return rows, err
}

func (NuoDBDialect) MigrationSQL() string {
	return fmt.Sprintf("SELECT tstamp, is_applied FROM %s WHERE version_id=? ORDER BY tstamp DESC LIMIT 1", goose.TableName())
}

func (NuoDBDialect) DeleteVersionSQL() string {
	return fmt.Sprintf("DELETE FROM %s WHERE version_id=?;", goose.TableName())
}
